const template = `{{#> Component }}
{{#*inline "imports-block"}}
import { useParams } from 'react-router-dom';
import { Update, IFormProps, IOnSubmitForm } from '{{ uiPackage }}';
import { I{{ entityName }}Values, I{{ entityName }}Data, {{decapitalize entityName }}FormSchema, {{decapitalize entityName }}FormValues, {{decapitalize entityName }}FormChildren } from '../{{ entitiesName }}Config';
{{/inline}}
{{#*inline "props-block"}}
interface IProps extends Pick<IFormProps<I{{ entityName }}Values, I{{ entityName }}Data>, 'onSuccess' | 'formValues'> { }
{{/inline}}
{{#*inline "helmet-block"}}{{/inline}}
{{#*inline "pre-render-block"}}const matchParams = useParams<{ {{decapitalize entityName }}Id: string }>();
  const onSubmit: IOnSubmitForm<I{{ entityName }}Values, I{{ entityName }}Data> = async (values, formikHelpers) => {
    return { ...values, id: matchParams.{{decapitalize entityName }}Id };
  };

  const safeFormValues: any = { ...{{decapitalize entityName }}FormValues };
  Object.keys(safeFormValues).forEach(value => {
    const key = value as keyof I{{ entityName }}Values;
    if (props.formValues[key]) {
      safeFormValues[key] = props.formValues[key] as I{{ entityName }}Values[keyof I{{ entityName }}Values];
    }
  });

  const form = {
    title: t('Update {{decamelize entityName }} "\\{{label}}"', safeFormValues),
    onSubmit,
    formValues: safeFormValues,
    formSchema: {{decapitalize entityName }}FormSchema(t),
    children: {{decapitalize entityName }}FormChildren(t),
    onSuccess: props.onSuccess,
  };
{{/inline}}
{{#*inline "render-block-title"}}{{/inline}}
{{#*inline "render-block"}}<Update<I{{ entityName }}Values, I{{ entityName }}Data> modal form={form} children={props.children}/>{{/inline}}
{{/Component}}`;
module.exports = template;
