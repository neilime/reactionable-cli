const template = `{{#> Component }}
{{#*inline "imports-block"}}
import { lazy } from "react";
import { Suspense } from "@reactionable/core";
import { Link, useParams } from "@reactionable/router-dom";
import { Read } from "{{ uiPackage }}";
import { useQueryList } from "{{ hostingPackage }}";

import { I{{ entityName }}Data, IGet{{ entityName }}QueryVariables } from "../{{ entitiesName }}Config";

const Update{{ entityName }} = lazy(() => import("../update-{{hyphenize entityName }}/Update{{ entityName }}"));

interface I{{entityName}}ItemProps { 
  data: I{{ entityName }}Data;
  refetch: () => void;
}

const {{componentName}}Item = ({ data, refetch }: PropsWithChildren<I{{entityName}}ItemProps>): ReactElement => {
  const { t } = useTranslation("{{decapitalize entitiesName }}");
  const match = useRouteMatch();

  return <>
    <Head>
      <title>{t("{{projectName}}", { ns: "common" })} - {t("{{capitalize (decamelize entityName)}} - \\{{label}}", data)}</title>
      <meta name="description" content={t("{{capitalize (decamelize entityName)}} - \\{{label}}", data)} />
    </Head>
    <h1>{t("{{capitalize (decamelize componentName)}} - {{label}}", data)}</h1>
    { data && <Suspense>
      <Update{{ entityName }}
        onSuccess={refetch}
        formValues={data}
      >
        <Link to="#">{ t("Update {{decamelize entityName }} \"\\{{label}}\"", data) }</Link>
      </Update{{ entityName }}>
    </Suspense>}
  </>;
};

{{/inline}}
{{#*inline "head-block"}}{{/inline}}
{{#*inline "pre-render-block"}}const matchParams = useParams<{ {{decapitalize entityName }}Id: string }>();

  const { data, refetch, ...readProps } = useQuery<I{{ entityName }}Data, IGet{{ entityName }}QueryVariables>({
    variables: { id: matchParams.{{decapitalize entityName }}Id },
  });

  const renderChildren = (data: I{{ entityName }}Data) => <{{componentName}}Item data={data} refetch={refetch}/>;
{{/inline}}
{{#*inline "render-block-title"}}{{/inline}}
{{#*inline "render-block"}}<Read<I{{ entityName }}Data>
      {...readProps}
      data={data}
      children={renderChildren}
    />{{/inline}}
{{/Component}}`;
module.exports = template;
