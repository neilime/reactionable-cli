const template = `{{#> Component }}
{{#*inline "imports-block"}}
import { Link, useParams } from 'react-router-dom';
import { lazy } from 'react';
import { Suspense } from '@reactionable/core';
import { Read } from '{{ uiPackage }}';
import { useQueryList } from '{{ hostingPackage }}';
import { I{{ entityName }}Data, IGet{{ entityName }}QueryVariables } from '../{{ entitiesName }}Config';

const Update{{ entityName }} = lazy(() => import('../update-{{hyphenize entityName }}/Update{{ entityName }}'));

interface I{{entityName}}ItemProps { 
  data: I{{ entityName }}Data;
  refetch: () => void;
}

const {{componentName}}Item: FC<I{{entityName}}ItemProps> = ({ data, refetch }) => {
  const { t } = useTranslation();
  const match = useRouteMatch();

  return <>
    <Helmet>
      <title>{t('{{projectName}}')} - {t('{{capitalize (decamelize componentName)}} - \\{{label}}', data)}</title>
      <meta name="description" content={t('{{capitalize (decamelize componentName)}} - \\{{label}}', data)} />
    </Helmet>
    <h1>{t('{{capitalize (decamelize componentName)}} - \\{{label}}', data)}</h1>
    { data && <Suspense>
      <Update{{ entityName }}
        onSuccess={refetch}
        formValues={data}
      >
        <Link to="#">{ t('Update {{decamelize entityName }} "\\{{label}}"', data) }</Link>
      </Update{{ entityName }}>
    </Suspense>}
  </>;
};

{{/inline}}
{{#*inline "helmet-block"}}{{/inline}}
{{#*inline "pre-render-block"}}const matchParams = useParams<{ {{decapitalize entityName }}Id: string }>();

  const { data, refetch, ...readProps } = useQuery<I{{ entityName }}Data, IGet{{ entityName }}QueryVariables>({
    variables: { id: matchParams.{{decapitalize entityName }}Id },
  });

  const renderChildren = (data: I{{ entityName }}Data) => <{{componentName}}Item data={data} refetch={refetch}/>;
{{/inline}}
{{#*inline "render-block-title"}}{{/inline}}
{{#*inline "render-block"}}<Read<I{{ entityName }}Data>
      {...readProps}
      data={data}
      children={renderChildren}
    />{{/inline}}
{{/Component}}`;
module.exports = template;
